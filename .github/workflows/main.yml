# .github/workflows/glitch-cutout-fixed.yml
name: Glitch Cut-Out Effect (Fixed)

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: '処理したいニコニコ動画のURL'
        required: true
      holes:
        description: '開ける穴の数'
        required: false
        default: '5'
      max_hole_w:
        description: '穴の最大幅(px)'
        required: false
        default: '200'
      max_hole_h:
        description: '穴の最大高さ(px)'
        required: false
        default: '100'
      noise_fill:
        description: '穴をノイズで埋める (yes/no)'
        required: false
        default: 'yes'

jobs:
  cutout-fixed:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg python3-pip
          pip3 install yt-dlp

      - name: Download video
        run: |
          yt-dlp "${{ github.event.inputs.video_url }}" -o input.mp4

      - name: Generate cut-out filter and apply (fixed)
        id: generate_video # 後続のステップでファイル名を参照するためにIDを設定
        run: |
          set -eux

          HOLES=${{ github.event.inputs.holes }}
          MAXW=${{ github.event.inputs.max_hole_w }}
          MAXH=${{ github.event.inputs.max_hole_h }}
          NOISE_FILL="${{ github.event.inputs.noise_fill }}"

          # 動画解像度を取得
          read VID_W VID_H <<< "$(ffprobe -v error -select_streams v:0 \
            -show_entries stream=width,height -of csv=p=0 input.mp4)"

          # ベースフィルタ：RGBA モードに
          FILTER="format=rgba"

          for i in $(seq 1 $HOLES); do
            WIDTH=$(( RANDOM % MAXW + 20 ))
            HEIGHT=$(( RANDOM % MAXH + 20 ))
            X=$(( RANDOM % (VID_W - WIDTH) ))
            Y=$(( RANDOM % (VID_H - HEIGHT) ))

            # 穴を「透明」で開ける
            FILTER="$FILTER,drawbox=x=$X:y=$Y:w=$WIDTH:h=$HEIGHT:color=black@0.0:t=fill"

            if [ "$NOISE_FILL" = "yes" ]; then
              FILTER="$FILTER,noise=alls=20:allf=t"
            fi
          done

          # 最後に YUV に戻して出力可能に
          FILTER="$FILTER,format=yuv420p"

          # 出力ファイル名にタイムスタンプを含める
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          OUTPUT_FILENAME="glitch_cutout_${TIMESTAMP}.mp4"

          # FFmpegコマンドの実行
          ffmpeg -y -i input.mp4 -vf "$FILTER" \
            -c:v libx264 \
            -c:a copy \
            "$OUTPUT_FILENAME"

          echo "output_filename=$OUTPUT_FILENAME" >> $GITHUB_OUTPUT # 出力ファイル名を次のステップに渡す

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: success() # 前のステップが成功した場合のみ実行
        with:
          files: ${{ steps.generate_video.outputs.output_filename }} # 動的に生成されたファイル名を指定
          tag_name: v${{ github.run_number }}-${{ github.run_id }} # 一意のタグ名
          name: Glitch Cut-Out Video ${{ github.run_number }}
          body: |
            このリリースには、ニコニコ動画のURLから生成されたグリッチカットアウト動画が含まれています。
            入力URL: ${{ github.event.inputs.video_url }}
            穴の数: ${{ github.event.inputs.holes }}
            最大幅: ${{ github.event.inputs.max_hole_w }}px
            最大高さ: ${{ github.event.inputs.max_hole_h }}px
            ノイズ埋め: ${{ github.event.inputs.noise_fill }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # リポジトリへの書き込み権限を持つトークン

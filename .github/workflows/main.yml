# .github/workflows/glitch-cutout-fixed.yml
name: Glitch Cut-Out Effect (GitHub Actions Only - Extreme Corruption)

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: '処理したいニコニコ動画のURL'
        required: true

jobs:
  cutout-fixed:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg yt-dlp

      - name: Download video
        run: |
          # --no-cache-dir を追加して、yt-dlpのキャッシュを使わないようにする
          yt-dlp --no-cache-dir "${{ github.event.inputs.video_url }}" -o input.mp4

      - name: Process video with extreme glitches
        id: process_video_step
        run: |
          set -eux

          VID_INFO=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height,avg_frame_rate -of csv=p=0:s=x input.mp4)
          VID_W=$(echo "$VID_INFO" | cut -d',' -f1 | cut -d'x' -f1)
          VID_H=$(echo "$VID_INFO" | cut -d',' -f1 | cut -d'x' -f2)
          FPS_NUM=$(echo "$VID_INFO" | cut -d',' -f3 | cut -d'/' -f1)
          FPS_DEN=$(echo "$VID_INFO" | cut -d',' -f3 | cut -d'/' -f2)
          if [ "$FPS_DEN" -eq 0 ]; then
            INPUT_FPS=30
          else
            INPUT_FPS=$((FPS_NUM / FPS_DEN))
          fi

          echo "Detected input resolution: ${VID_W}x${VID_H}, FPS: ${INPUT_FPS}"

          RAND_SEED=$(date +%s%N)
          RANDOM_ROTATE_ANGLE_DEGREES=$(awk -v seed="$RAND_SEED" 'BEGIN{srand(seed); printf "%.2f", rand() * 9.5 + 0.5}')
          RANDOM_ROTATE_ANGLE_RADIANS=$(awk -v val="$RANDOM_ROTATE_ANGLE_DEGREES" 'BEGIN{print val * (atan2(0,-1)/180)}')
          RANDOM_GEQ_FACTOR=$(( RANDOM % 501 + 300 ))
          GLITCH_FPS_OPTIONS=(0.5 1 2 3 5 10 60 120)
          GLITCH_FPS=${GLITCH_FPS_OPTIONS[$(( RANDOM % ${#GLITCH_FPS_OPTIONS[@]} ))]}
          PIXEL_BLOCK_SIZE=$(( RANDOM % 45 + 4 ))
          NOISE_STRENGTH=$(( RANDOM % 31 + 20 ))
          DISTORTION_FACTOR=$(awk -v seed="$RAND_SEED" 'BEGIN{srand(seed + 1); printf "%.3f", rand() * 0.09 + 0.01}')
          RANDOM_CHROMA_SHIFT=$(( RANDOM % 41 + 10 ))
          DEADZONE=$(awk -v seed="$RAND_SEED" 'BEGIN{srand(seed + 2); printf "%.2f", rand() * 0.19 + 0.01}')
          DEADZONE_INT=$(echo "$DEADZONE * 100" | bc | cut -d'.' -f1)
          G_VALUE=$(( INPUT_FPS * (RANDOM % 16 + 5) ))
          SLICES=$(( RANDOM % 64 + 1 ))

          FILTER_COMPLEX="
            [0:v]split=2[original][feedback_raw];
            [feedback_raw]
              fps=${GLITCH_FPS},
              scale=${VID_W}:${VID_H},
              tpad=start=0.05:stop=2,
              rotate=${RANDOM_ROTATE_ANGLE_RADIANS}:ow=rotw(${RANDOM_ROTATE_ANGLE_RADIANS}):oh=roth(${RANDOM_ROTATE_ANGLE_RADIANS}),
              scale=${VID_W}:${VID_H},
              colorchannelmixer=2.0:-0.5:-0.5:0: -0.5:2.0:-0.5:0: -0.5:-0.5:2.0:0: 0:0:0:1,
              geq=r='random(1)*${RANDOM_GEQ_FACTOR}':g='random(1)*${RANDOM_GEQ_FACTOR}':b='random(1)*${RANDOM_GEQ_FACTOR}',
              gblur=sigma=10:steps=5,
              scale=iw/${PIXEL_BLOCK_SIZE}:ih/${PIXEL_BLOCK_SIZE},
              scale=${VID_W}:${VID_H}:flags=neighbor,
              negate,
              loop=loop=30:size=1:start=0,
              curves=preset=strong_contrast,
              lenscorrection=k1=${DISTORTION_FACTOR}:k2=${DISTORTION_FACTOR},
              chromakey=0x00FF00:0.1:0.0,
              edgedetect=mode=canny:low=0.1:high=0.4:intensity=5,
              mpdecimate=hi=64*60:lo=64*10:frac=0.3,
              setpts=PTS+random(0)*2/TB[glitch_feedback];

            color=c=black:s=${VID_W}x${VID_H}:d=10,
              format=yuv444p,
              noise=${NOISE_STRENGTH},
              format=rgb24,
              format=yuv420p,
              geq=r='(r(X,Y)+random(0)*150)':g='(g(X,Y)+random(0)*150)':b='(b(X,Y)+random(0)*150)',
              lutrgb=r='clip(r+random(1)*${RANDOM_CHROMA_SHIFT},0,255)':g='clip(g+random(1)*${RANDOM_CHROMA_SHIFT},0,255)':b='clip(b+random(1)*${RANDOM_CHROMA_SHIFT},0,255)',
              crop=$((VID_W/2)):$((VID_H/2)):$(( RANDOM % (VID_W/4) )):$(( RANDOM % (VID_H/4) )),scale=${VID_W}:${VID_H}:flags=neighbor,
              shufflepixels=direction=horizontal:width=$(( RANDOM % 4 + 1 )):height=$(( RANDOM % 4 + 1 )),
              setpts=PTS+random(0)*1.5/TB[noise_layer];

            [0:a]showvolume=f=0:s=0:o=v:c=0xFFAABBCC,
              format=yuv420p,
              scale=${VID_W}:${VID_H},
              geq=g='st(1, gt(abs(st(0, (T*2*PI*0.5)+sin(T*3*PI*0.1))) , 0.5)*255)',
              setpts=PTS+random(0)*2.0/TB[audio_glitch];

            [original][glitch_feedback]blend=all_mode=difference:all_opacity=1.0[blend1];
            [blend1][noise_layer]blend=all_mode=addition:all_opacity=1.0[blend2];
            [blend2][audio_glitch]blend=all_mode=grainmerge:all_opacity=1.0[v_out];

            [0:a]acrusher=level_in=8:level_out=4:bits=$(( RANDOM % 8 + 1 )):mode=log:aa=1:samples=$(( RANDOM % 500 + 1 )):mix=0.8,
              atempo=0.5,
              compand=attacks=0:decays=0:points=-80/-80|-15/-15|0/0:soft-knee=0,
              channelmap=channel_map=FL-FL|FR-FR,
              adelay=delays=100|200:all=1,
              afade=t=out:st=3:d=1,
              aselect='random(0)*0.8', asetpts=N/SR/TB[a]
          "
          FILTER_COMPLEX=$(echo "$FILTER_COMPLEX" | tr -d '\n' | sed 's/ //g')

          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          OUTPUT_FILENAME="glitch_extreme_${TIMESTAMP}.mp4"

          FFMPEG_CMD="ffmpeg -y -i input.mp4 -filter_complex \"${FILTER_COMPLEX}\" \
            -map \"[v_out]\" -map \"[a]\" \
            -c:v libx264 -preset ultrafast -crf 51 \
            -profile:v baseline -level 3.0 \
            -g ${G_VALUE} -keyint_min 1 -sc_threshold 0 \
            -b:v 10k -slices ${SLICES} \
            -x264-params \"me=dia:subme=0:trellis=0:no-fast-pskip=1:no-dct-decimate=1:nr=10000:deadzone-inter=${DEADZONE_INT}:deadzone-intra=${DEADZONE_INT}:qcomp=0.0\" \
            -c:a aac -b:a 16k -pix_fmt yuv420p \
            \"${OUTPUT_FILENAME}\""

          echo "Running FFmpeg command:"
          echo "$FFMPEG_CMD"
          eval "$FFMPEG_CMD" || {
              echo "FFmpeg command failed. This might be an intended part of the extreme glitch process!"
              if [ -s "$OUTPUT_FILENAME" ]; then
                  echo "Partial output file generated. It might still contain extreme glitches!"
              else
                  echo "FFmpeg failed to produce any output file. The glitch settings might be too extreme for this input/FFmpeg version. Try slightly reducing random ranges or filter intensities."
                  exit 1
              fi
          }

          echo "output_file=$OUTPUT_FILENAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: success() && steps.process_video_step.outputs.output_file
        with:
          files: ${{ steps.process_video_step.outputs.output_file }}
          tag_name: glitch-v${{ github.run_number }}-${{ github.run_id }}
          name: Extreme Glitch Video ${{ github.run_number }}
          body: |
            このリリースには、ニコニコ動画のURLから極限まで破壊されたグリッチ動画が含まれています。
            入力URL: ${{ github.event.inputs.video_url }}

            **警告**: この動画は意図的に破損されており、視認・聴取が困難な場合があります。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
